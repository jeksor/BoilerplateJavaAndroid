import com.android.builder.core.BuilderConstants

plugins {
	id "me.tatarka.retrolambda" version "3.5.0"
}

apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'realm-android'
apply from: '../config/quality/quality.gradle'

android {
	compileSdkVersion globalCompileSdkVersion
	buildToolsVersion globalBuildToolsVersion

	defaultConfig {
		applicationId "com.esorokin.boilerplate"
		minSdkVersion globalMinSdkVersion
		targetSdkVersion globalTargetVersion
		versionName '0.1.0' // Major, Minor, Bugfix
		versionCode 1

		buildConfigField "boolean", "IS_TURN_LOGS", buildServerEnable.toBoolean() ? buildServerLogs.toBoolean() : "true"
		manifestPlaceholders = [applicationLabel: "Custom app name"] //TODO replace with your app name
	}

	signingConfigs {
		// you must set up an environment var before release signing
		// run: export APP_KEY={password}
		// TODO add your release keystore in /keystore folder
		release {
			storeFile file('../keystore/release.keystore')
			keyAlias 'alias'
			storePassword "$System.env.APP_KEY"
			keyPassword "$System.env.APP_KEY"
		}

		debug {
			storeFile file('../keystore/debug.keystore')
			keyAlias 'androiddebugkey'
			storePassword 'android'
			keyPassword 'android'
		}
	}

	buildTypes {
		prod {
			signingConfig signingConfigs.release
			minifyEnabled buildServerEnable.toBoolean()
			debuggable !buildServerEnable.toBoolean()
			proguardFile getDefaultProguardFile('proguard-android.txt')
			proguardFiles file('../config/proguard').listFiles()

			manifestPlaceholders = [applicationLabelSuffix: ""]
		}

		dev {
			signingConfig signingConfigs.debug
			minifyEnabled false
			debuggable true
			proguardFile getDefaultProguardFile('proguard-android.txt')
			proguardFiles file('../config/proguard').listFiles()

			manifestPlaceholders = [applicationLabelSuffix: " dev"]
			applicationIdSuffix ".dev"
			versionNameSuffix " Dev"
		}
	}

	//allow to use custom build type like {dev, stage, live}
	android.variantFilter { variant ->
		def build = variant.buildType.name
		if (build == BuilderConstants.DEBUG || build == BuilderConstants.RELEASE) {
			variant.setIgnore(true);
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}

	//using only for inflate views
	dataBinding {
		enabled = true
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])

	//support libraries
	compile "com.android.support:appcompat-v7:${support}"
	compile "com.android.support:design:${support}"
	compile "com.android.support:cardview-v7:${support}"
	compile "com.android.support:recyclerview-v7:${support}"

	//gps
	compile "com.google.android.gms:play-services-gcm:${playServices}"

	//network
	compile "com.squareup.retrofit2:retrofit:${retrofit}"
	compile "com.squareup.retrofit2:converter-gson:${retrofit}"
	compile "com.squareup.okhttp3:logging-interceptor:${okhttp}"

	//rx
	compile "io.reactivex.rxjava2:rxjava:${rxjava}"
	compile "io.reactivex.rxjava2:rxandroid:${rxjava}"
	compile "com.jakewharton.rxbinding2:rxbinding:${rxbinding}"

	//di
	annotationProcessor "com.google.dagger:dagger-compiler:${dagger2}"
	compile "com.google.dagger:dagger:${dagger2}"
	provided 'javax.annotation:jsr250-api:1.0'

	//mvp
	compile "com.arello-mobile:moxy:${moxy}"
	compile "com.arello-mobile:moxy-app-compat:${moxy}"
	annotationProcessor "com.arello-mobile:moxy-compiler:${moxy}"

	//utils
	compile "com.scottyab:secure-preferences-lib:${securePrefs}"
	compile "com.jakewharton.timber:timber:${timber}"
	provided "org.projectlombok:lombok:${lombok}"
	compile "com.hannesdorfmann:adapterdelegates3:${adapterDelegates}"
}